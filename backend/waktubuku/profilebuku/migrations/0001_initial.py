# Generated by Django 3.0.5 on 2020-05-21 07:14

from django.db import migrations, models
import django.utils.timezone
import profilebuku.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Saldo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('penghasilan', models.DecimalField(decimal_places=2, max_digits=30)),
                ('dana_masuk', models.DecimalField(decimal_places=2, max_digits=30)),
                ('dana_keluar', models.DecimalField(decimal_places=2, max_digits=30)),
                ('keterangan', models.CharField(max_length=400)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserLoginActivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('login_Ip', models.GenericIPAddressField(blank=True, null=True)),
                ('login_datetime', models.DateTimeField(auto_now=True)),
                ('login_username', models.CharField(blank=True, max_length=100, null=True)),
                ('status', models.CharField(blank=True, choices=[('S', 'Success'), ('F', 'Failed')], default='S', max_length=1, null=True)),
                ('user_agent_info', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'user_login_activity',
                'verbose_name_plural': 'user_login_activities',
            },
        ),
        migrations.CreateModel(
            name='UserModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username_user', models.CharField(blank=True, max_length=200, null=True, verbose_name='username_user')),
                ('slug', models.SlugField()),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('no_telepon', models.CharField(max_length=20)),
                ('image_profile', models.ImageField(blank=True, upload_to='image_profile/%Y/%m/%d')),
                ('image_walpaper', models.ImageField(blank=True, upload_to='image_penwlpr_field/%Y/%m/%d')),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('biografi', models.TextField()),
                ('alamat', models.CharField(max_length=300)),
                ('gender', models.CharField(choices=[('Wanita', 'wanita'), ('Laki-Laki', 'laki-laki')], max_length=100)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', profilebuku.models.UserManager()),
            ],
        ),
    ]
